# Get the input string from the user
string = input("Enter string:")

# Define a class to represent tree nodes for the Huffman tree
class NodeTree(object):
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right

    def children(self):
        return (self.left, self.right)

# Define a function for generating Huffman codes for characters in the Huffman tree
def huffman_code_tree(node, left=True, binString=''):
    # If the node is a character (leaf node), return its Huffman code
    if type(node) is str:
        return {node: binString}
    # If the node is an internal node, recursively explore left and right branches
    (l, r) = node.children()
    d = dict()
    d.update(huffman_code_tree(l, True, binString + '0'))  # Explore left with '0'
    d.update(huffman_code_tree(r, False, binString + '1'))  # Explore right with '1'
    return d

# Calculate character frequencies in the input string
freq = {}
for c in string:
    if c in freq:
        freq[c] += 1
    else:
        freq[c] = 1

# Sort characters by frequency in descending order
freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)

nodes = freq  # Initialize the list of nodes with characters and their frequencies

# Build the Huffman tree by merging nodes with the lowest frequencies
while len(nodes) > 1:
    (key1, c1) = nodes[-1]
    (key2, c2) = nodes[-2]
    nodes = nodes[:-2]
    # Create a new node that combines the two lowest frequency characters
    node = NodeTree(key1, key2)
    nodes.append((node, c1 + c2))
    # Sort the nodes again based on their frequencies
    nodes = sorted(nodes, key=lambda x: x[1], reverse=True)

# Generate Huffman codes for characters in the Huffman tree
huffmanCode = huffman_code_tree(nodes[0][0])

# Print a table of characters and their corresponding Huffman codes
print(' Char | Huffman code ')
print('----------------------')
for (char, frequency) in freq:
    print(' %-4r |%12s' % (char, huffmanCode[char]))
